@page
@model IndexModel
@{
    ViewData["Title"] = "CoffeeShop - TypeChat";
    var categories = await base.Gateway.SendAsync(new QueryCategories());
    var options = await base.Gateway.SendAsync(new QueryOptions());
    var optionQuantities = await base.Gateway.SendAsync(new QueryOptionQuantities());
}
<style>
.bg {
    position: absolute;
    width: 100%;
    height: calc(100% - 850px);
    left: 0;
    top: 850px;
    opacity: .05;
    background-image: url('/img/bg.png');
    background-repeat: repeat-x;
    background-position: 50% 0;
    z-index: -1;
}
.animation-pulse {
    animation: pulse 2s infinite;
}
@@keyframes pulse {
    0% {
        transform: scale(0.8);
        box-shadow: 0 0 0 0 rgba(229, 62, 62, 1);
    }

    70% {
        transform: scale(1);
        box-shadow: 0 0 0 60px rgba(229, 62, 62, 0);
    }

    100% {
        transform: scale(0.8);
    }
}
</style>
<div class="bg"></div>

<div class="container mx-auto">
    <section class="flex-col md:flex-row flex items-center md:justify-between mt-16 mb-16 md:mb-12">
        <h1 class="text-6xl md:text-8xl font-bold tracking-tighter leading-tight">Menu</h1>
    </section>
</div>

<div id="app" class="container mx-auto w-full bg-white">
    <div class="flex justify-between w-full">
        <div class="pt-12 mt-2 w-40">
            @foreach (var category in categories.Results)
            {
                <a href="#@category.Name" class="block mb-8 cursor-pointer hover:text-indigo-600">
                    <img src="@category.ImageUrl" alt="" class="w-16 h-16 rounded-full object-cover">
                    <span class="block mt-2 select-none">
                        @category.Description
                    </span>
                </a>
            }
        </div>
        <div v-cloak class="flex-grow">
            <div v-if="activeCategory" class="mb-4 text-xl select-none">
                <a href="#">Menu</a> /
                <a :href="`#${activeCategory.name}`" :class="{ 'font-semibold':!activeProduct }">{{activeCategory.description}}</a>
                <span v-if="activeProduct" class="font-semibold"> / {{activeProduct.name}}</span>
            </div>
            <div v-if="activeProduct">
                <div class="p-8 bg-stone-50 rounded-md">
                    <div class="flex items-center">
                        <img :src="activeProduct.imageUrl" alt="" class="w-40 h-40 object-cover">
                        <div class="ml-8 text-4xl">
                            <div>{{activeProduct.name}}</div>
                            <div class="pt-2" v-html="currency(activeProduct.cost)"></div>
                        </div>
                    </div>
                </div>
                <div class="flex">
                    <div v-if="activeCategory.sizes || activeCategory.temperatures" class="w-1/2">
                        <div class="pl-8">
                            <div class="pt-8 pr-8" v-if="activeCategory.sizes">
                                <h3 class="text-2xl border-b pb-2 mb-4">Size Options</h3>
                                <fieldset class="mt-2">
                                    <legend class="sr-only">Choose a Size preference</legend>
                                    <div class="grid grid-cols-2 md:grid-cols-4 gap-1 sm:gap-3">
                                        <label v-for="size in activeCategory.sizes"
                                               :class="['flex items-center justify-center whitespace-nowrap rounded-md py-3 px-3 text-sm font-semibold uppercase sm:flex-1 cursor-pointer focus:outline-none',
                                                      size == orderItem.size ? 'ring-2 ring-indigo-600 ring-offset-2 bg-indigo-600 text-white hover:bg-indigo-500' : 'ring-1 ring-inset ring-gray-300 bg-white text-gray-900 hover:bg-gray-50']">
                                            <input v-model="orderItem.size" type="radio" name="temperature" :value="size" class="sr-only">
                                            <span>{{size}}</span>
                                        </label>
                                    </div>
                                </fieldset>
                            </div>
                            <div class="pt-8 pr-8" v-if="activeCategory.temperatures">
                                <h3 class="text-2xl border-b pb-2 mb-4">Temperature preference</h3>
                                <fieldset class="mt-2">
                                    <legend class="sr-only">Choose a Temperature preference</legend>
                                    <div class="grid grid-cols-2 md:grid-cols-4 gap-1 sm:gap-3">
                                        <label v-for="temp in activeCategory.temperatures"
                                               :class="['flex items-center justify-center whitespace-nowrap rounded-md py-3 px-3 text-sm font-semibold uppercase sm:flex-1 cursor-pointer focus:outline-none',
                                                      temp == orderItem.temperature ? 'ring-2 ring-red-600 ring-offset-2 bg-red-600 text-white hover:bg-red-500' : 'ring-1 ring-inset ring-gray-300 bg-white text-gray-900 hover:bg-gray-50']">
                                            <input v-model="orderItem.temperature" type="radio" name="temperature" :value="temp" class="sr-only">
                                            <span>{{temp}}</span>
                                        </label>
                                    </div>
                                </fieldset>
                            </div>
                        </div>
                    </div>
                    <div class="w-1/2">
                        <div class="pl-8 pt-8">
                            <h3 class="text-2xl border-b pb-2 mb-4">Customize</h3>
                            <div v-for="option in productOptions" class="pb-8 flex max-w-xs">
                                <div class="">
                                    <label for="">{{humanize(option.type)}}</label>
                                    <select-input class="w-32 md:w-60" class="flex-grow" v-model="orderItem.options[option.type]" :values="['',...option.names]"></select-input>
                                </div>
                                <div v-if="option.allowQuantity && option.quantityLabel" class="ml-4 select-none">
                                    <label for="">{{option.quantityLabel}}</label>
                                    <div class="h-12 flex items-center">
                                        <svg v-on:click="orderItem.optionSizes[option.type] = Math.max((orderItem.optionSizes[option.type] ?? 1)-1,0)" class="w-6 h-6 align-middle cursor-pointer text-gray-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m0-18A10 10 0 0 0 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2M7 13h10v-2H7"></path></svg>
                                        <span class="w-6 text-center font-semibold text-gray-600">{{ orderItem.optionSizes[option.type] ?? 1 }}</span>
                                        <svg v-on:click="orderItem.optionSizes[option.type] = (orderItem.optionSizes[option.type] ?? 1) + 1" class="w-6 h-6 align-middle cursor-pointer text-gray-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M12 17q.425 0 .713-.288T13 16v-3h3.025q.425 0 .7-.288T17 12q0-.425-.288-.713T16 11h-3V7.975q0-.425-.288-.7T12 7q-.425 0-.713.288T11 8v3H7.975q-.425 0-.7.288T7 12q0 .425.288.713T8 13h3v3.025q0 .425.288.7T12 17Zm0 5q-2.075 0-3.9-.788t-3.175-2.137q-1.35-1.35-2.137-3.175T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Zm0-10Zm0 8q3.325 0 5.663-2.337T20 12q0-3.325-2.337-5.663T12 4Q8.675 4 6.337 6.337T4 12q0 3.325 2.337 5.663T12 20Z"></path></svg>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div v-if="modifyingExistingItem" class="p-8 flex justify-end items-center">
                    <text-link v-on:click="doneEditCartItem(false)" class="text-lg pr-4">cancel</text-link>
                    <button v-on:click="doneEditCartItem(true)" type="button" class="rounded-full bg-green-600 px-4 py-2.5 text-lg font-semibold text-white shadow-sm hover:bg-green-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-600">
                        Save Order
                    </button>
                </div>
                <div v-else class="p-8 flex justify-end items-center">
                    <text-link v-on:click="reset" class="text-lg pr-4">reset</text-link>
                    <button v-on:click="addToOrder(map(orderItem, x => { x.product = activeProduct.name; return x }))" type="button" class="rounded-full bg-green-600 px-4 py-2.5 text-lg font-semibold text-white shadow-sm hover:bg-green-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-600">
                        Add to Order
                    </button>
                </div>
            </div>
            <div v-else-if="activeCategory" class="mt-8 grid grid-cols-3">
                <a v-for="product in activeCategory.products" :href="`#${activeCategory.name}/${product.name}`" class="block mb-8 flex flex-col items-center">
                    <img :src="product.imageUrl" alt="" class="w-28 h-28 rounded-full object-cover">
                    <span class="block mt-2 text-lg font-medium">
                        {{product.name}}
                    </span>
                </a>
            </div>
            <div v-else class="mt-20 text-center">
                <div class="mx-auto max-w-screen-sm flex items-center justify-end">
                    <div>
                        <form v-if="!(isRecording || isTranscribing || transcript)" v-on:submit.prevent="onSubmit">
                            <text-input v-model="txtOrder" :disabled="isSendingChat" class="w-96 text-2xl" placeholder="What can we get for you today?"></text-input>
                        </form>
                        <div v-else class="text-2xl text-gray-600">
                            <div v-if="isTranscribing" class="pr-20 flex items-center">
                                <loading></loading>
                                Transcribing...
                            </div>
                            <div v-else-if="apiProcessed.response" class="text-green-600 flex">
                                {{apiProcessed.response}}
                                <svg v-on:click="clear" class="w-10 h-10 cursor-pointer hover:text-green-800" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 21 21">
                                    <title>clear</title>
                                    <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m7.5 7.5l6 6m0-6l-6 6"/>
                                </svg>
                            </div>
                            <div v-else-if="apiProcessed.error" class="text-red-600 flex">
                                {{apiProcessed.error.message}}
                            </div>
                            <div v-else-if="transcript" class="lowercase">
                                <div class="pb-4">{{ transcript }}</div>
                            </div>
                            <div class="pr-20" v-else-if="isListening">Listening...</div>
                            <div class="pr-20" v-else-if="isRecording">Speak Now</div>
                        </div>
                    </div>
                    <div class="ml-8">
                        <div class="flex justify-center items-center">
                            <div v-if="!isRecording" v-on:click="toggleRecording" class="h-20 w-20 rounded-full flex justify-center items-center cursor-pointer shadow">
                                <svg class="w-10 h-10 text-gray-600" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48"><g fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="4"><rect width="14" height="27" x="17" y="4" rx="7"/><path stroke-linecap="round" d="M9 23c0 8.284 6.716 15 15 15c8.284 0 15-6.716 15-15M24 38v6"/></g></svg>
                            </div>
                            <div v-else v-on:click="toggleRecording" class="h-20 w-20 bg-red-600 rounded-full flex justify-center items-center cursor-pointer animation-pulse">
                                <svg class="w-10 h-10 text-white" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48"><g fill="none" stroke="currentColor" stroke-linejoin="round" stroke-width="4"><rect width="14" height="27" x="17" y="4" rx="7"/><path stroke-linecap="round" d="M9 23c0 8.284 6.716 15 15 15c8.284 0 15-6.716 15-15M24 38v6"/></g></svg>
                            </div>
                        </div>
                    </div>
                    <div :class="['ml-4', audio ? '' : 'invisible']">
                        <svg v-if="!isPlaying" v-on:click="audio.play()" class="w-10 h-10 text-gray-600 hover:text-gray-800 cursor-pointer" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><title>play</title> <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="m14.752 11.168l-3.197-2.132A1 1 0 0 0 10 9.87v4.263a1 1 0 0 0 1.555.832l3.197-2.132a1 1 0 0 0 0-1.664Z"/><path d="M21 12a9 9 0 1 1-18 0a9 9 0 0 1 18 0Z"/></g></svg>
                        <svg v-else v-on:click="audio.pause()" class="w-10 h-10 text-gray-600 hover:text-gray-800 cursor-pointer" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 1 1-18 0a9 9 0 0 1 18 0Z"/></svg>
                    </div>
                </div>
            </div>
            <div class="mt-4 mx-auto max-w-screen-sm text-2xl">
                <div v-if="!apiProcessed.completed && isSendingChat" class="text-gray-600 flex items-center justify-center">
                    <loading></loading>
                    Processing Order...
                </div>
            </div>
        </div>
        <div v-cloak class="ml-4 w-80">
            <div v-if="cartItems.length">
                <div v-cloak class="mb-4 text-xl select-none font-medium">
                    Cart
                </div>
                <div v-for="item in cartItems" class="shadow rounded p-4 mb-4">
                    <div class="flex">
                        <div>
                            <img :src="productsMap[item.product].imageUrl" alt="" class="w-16 h-16 rounded-full object-cover">
                        </div>
                        <div class="ml-4">
                            <div class="">
                                <span class="text-lg font-semibold">{{productsMap[item.product].name}}</span>
                                <div class="flex mt-1">
                                    <div v-if="item.size" class="mr-2">
                                        <span class="inline-flex items-center rounded-full bg-indigo-50 px-2 py-1 text-xs font-medium text-indigo-700 ring-1 ring-inset ring-indigo-700/10">{{item.size}}</span>
                                    </div>
                                    <div v-if="item.temperature">
                                        <span class="inline-flex items-center rounded-full bg-red-50 px-2 py-1 text-xs font-medium text-red-700 ring-1 ring-inset ring-red-600/10">{{item.temperature}}</span>
                                    </div>
                                </div>
                                <div class="pt-4">
                                    <ul v-if="itemOptions(item).length">
                                        <li v-for="option in itemOptions(item)">
                                            {{map(option.size, x => `${x}x `) || '' }} {{option.name}}
                                        </li>
                                    </ul>
                                </div>
                                <div class="pt-4 flex">
                                    <svg class="mr-2 w-6 h-6 align-middle cursor-pointer text-gray-500 hover:text-gray-600" v-on:click="editCartItem(item)" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"> <title>Modify Item</title> <path fill="currentColor" d="M16.293 2.293a1 1 0 0 1 1.414 0l4 4a1 1 0 0 1 0 1.414l-13 13A1 1 0 0 1 8 21H4a1 1 0 0 1-1-1v-4a1 1 0 0 1 .293-.707l10-10l3-3zM14 7.414l-9 9V19h2.586l9-9L14 7.414zm4 1.172L19.586 7L17 4.414L15.414 6L18 8.586z"/></svg>
                                    <svg class="mr-2 w-6 h-6 align-middle cursor-pointer text-gray-500 hover:text-gray-600" v-on:click="removeCartItem(item)" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"> <title>Remove Item</title> <path fill="currentColor" d="M12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m0-18A10 10 0 0 0 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2M7 13h10v-2H7"></path></svg>
                                    <svg class="mr-2 w-6 h-6 align-middle cursor-pointer text-gray-500 hover:text-gray-600" v-on:click="duplicateCartItem(item)" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"> <title>Duplicate Item</title> <path fill="currentColor" d="M12 17q.425 0 .713-.288T13 16v-3h3.025q.425 0 .7-.288T17 12q0-.425-.288-.713T16 11h-3V7.975q0-.425-.288-.7T12 7q-.425 0-.713.288T11 8v3H7.975q-.425 0-.7.288T7 12q0 .425.288.713T8 13h3v3.025q0 .425.288.7T12 17Zm0 5q-2.075 0-3.9-.788t-3.175-2.137q-1.35-1.35-2.137-3.175T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Zm0-10Zm0 8q3.325 0 5.663-2.337T20 12q0-3.325-2.337-5.663T12 4Q8.675 4 6.337 6.337T4 12q0 3.325 2.337 5.663T12 20Z"></path></svg>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="p-4 flex justify-end">
                    <primary-button v-on:click="emptyCart" color="red">Empty Cart</primary-button>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="module">
import { mount } from "/mjs/app.mjs"
import { ref, computed, onMounted, shallowRef } from "vue"
import { ApiResult, leftPart, rightPart, appendQueryString, omit, map, humanize } from "@@servicestack/client"
import { useAuth, useFormatters } from "@@servicestack/vue"
import { QueryOptions, Authenticate, CreateCoffeeShopRecording, CreateCoffeeShopChat } from "/mjs/dtos.mjs" 

const Mock = {
    transcribing: false,
    sendingChat: false,
    wait: 2000,
    recording: {
        "transcript": "i want a cold chai latte and a bagel",
    },
    chat: {
        "chatResponse": "{\r\n  \"items\": [\r\n    {\r\n      \"type\": \"lineitem\",\r\n      \"product\": {\r\n        \"type\": \"LatteDrinks\",\r\n        \"name\": \"chai latte\",\r\n        \"temperature\": \"iced\"\r\n      },\r\n      \"quantity\": 1\r\n    },\r\n    {\r\n      \"type\": \"lineitem\",\r\n      \"product\": {\r\n        \"type\": \"BakeryProducts\",\r\n        \"name\": \"bagel\"\r\n      },\r\n      \"quantity\": 1\r\n    }\r\n  ]\r\n}\r\n",
    }
}

const categories = @Html.Raw(categories.Results.ToJson())
const options = @Html.Raw(options.Results.ToJson())
const optionQuantities = @Html.Raw(optionQuantities.Results.ToJson())
const products = categories.flatMap(x => x.products)
const productsMap = {}
categories.forEach(c => c.products.forEach(p => productsMap[p.name] = p))

class AudioRecorder {
    /** @@type {Blob[]} */
    audioPartBlobs = []
    /** @@type {Blob} */
    audioBlob = null
    /** @@type {Audio} */
    audio = null
    /** @@type {MediaRecorder} */
    mediaRecorder = null
    /** @@type {MediaStream} */
    streamBeingCaptured = null
    /** @@type {String} */
    audioExt = null
    
    preferredMimeTypes = {
        webm: 'audio/webm',
        mp4: 'audio/mp4;codecs=mp4a',
    }
    
    
    hasAudio() {
        return !!this.audio
    }
    
    start() {
        if (!navigator.mediaDevices?.getUserMedia) {
            return Promise.reject(new Error('mediaDevices API or getUserMedia method is not supported in this browser.'));
        } else {
            this.audioPartBlobs = []
            this.audioBlob = null
            this.audio = null
            this.audioExt = null
            return navigator.mediaDevices.getUserMedia({
                 audio: {
                   advanced: [
                     {
                       channelCount: 1,
                       sampleRate: 16000,
                     },
                   ],
                 },
               })
                .then(stream => {
                    try {
                        this.streamBeingCaptured = stream
                        
                        const exts = Object.keys(this.preferredMimeTypes)
                        for (let i = 0; i < exts.length; i++) {
                            const ext = exts[i]
                            const mimeType = this.preferredMimeTypes[ext]
                            try {
                                this.mediaRecorder = new MediaRecorder(stream, { mimeType })
                                this.audioExt = ext
                                break
                            } catch (e) {
                                console.warn(`MediaRecorder: ignoring unsupported mimeType: ${mimeType}`)
                            }
                        }

                        if (this.mediaRecorder) {
                            this.mediaRecorder.addEventListener("dataavailable", event => {
                                this.audioPartBlobs.push(event.data)
                            })
                            this.mediaRecorder.start()
                        }
                    } catch (e) {
                        console.log('error start()', e)
                        throw e
                    }
                    if (!this.mediaRecorder)
                        throw new Error("No supported MediaRecorder mimeTypes found")
                })
        }
    }
    
    stop() {
        return new Promise(resolve => {
            let type = this.mediaRecorder.mimeType
            this.mediaRecorder.addEventListener("stop", () => {
                try {
                    this.audioBlob = new Blob(this.audioPartBlobs, { type })
                    
                    let reader = new FileReader()
                    reader.onload = e => {
                        let base64URL = e.target.result
                        this.audio = new Audio(base64URL)
                        this.audio.load()
                        resolve(this.audio)
                    }
                    reader.readAsDataURL(this.audioBlob)
                } catch (e) {
                    console.log('error stop()', e)
                    throw e
                }
            })
            this.cancel()
        })
    }
    
    cancel() {
        this.mediaRecorder.stop()
        this.stopStream()
        this.resetRecordingProperties()
    }
    
    stopStream() {
        this.streamBeingCaptured.getTracks()
            .forEach(track => track.stop()) //MediaStreamTrack
    }
    
    resetRecordingProperties() {
        this.mediaRecorder = null
        this.streamBeingCaptured = null
    }
}

const App = {
    setup() {
        const { user, signIn } = useAuth()
        const { currency } = useFormatters()
        const init = ref(false)
        const refreshKey = ref(1)
        const getCategory = () => leftPart(rightPart(leftPart(location.hash,'?'), '#'), '/')
        const getProduct = () => map(rightPart(rightPart(leftPart(location.hash,'?'), '#'), '/'), x => decodeURIComponent(x))
        const activeCategory = shallowRef(categories.find(x => x.name === getCategory()))
        const activeProduct = shallowRef(categories.flatMap(x => x.products).find(x => x.name === getProduct()))
        const categoryOptions = ref()
        const productOptions = computed(() => (categoryOptions.value && activeCategory.value 
            ? categoryOptions.value.filter(x => activeCategory.value.categoryOptions.some(y => y.optionId === x.id)) : null) || [])
        const cart = ref()
        const cartItems = computed(() => cart.value && cart.value.items || [])
        const orderItem = ref(createOrderItem(activeCategory.value))
        const modifyingExistingItem = computed(() => cartItems.value.some(x => x === orderItem.value))
        const txtOrder = ref('')       
        const isRecording = ref(false)
        const isTranscribing = ref(false)
        const isListening = ref(false)
        const isSendingChat = ref(false)
        let audioRecorder = new AudioRecorder()
        window.audioRecorder = audioRecorder
        const audio = ref()
        const isPlaying = ref(false)
        const transcript = ref('')
        const apiChat = ref(new ApiResult())
        const apiProcessed = ref(new ApiResult())
        
        function navTo(category, args={}, pushState=true) {
            console.log('navTo', category, args, pushState)
            if (!args) args = {}
            refreshKey.value++
            activeCategory.value = categories.find(x => x.name === category)
            activeProduct.value = categories.flatMap(x => x.products).find(x => x.name === args.product)
            orderItem.value = createOrderItem(activeCategory.value)
            if (pushState) {
                history.pushState({ category, ...args }, null, 
                    appendQueryString(`#${category}` + (args.product ? `/${args.product}` : ''), omit(args,['product'])))
            }
        }
        
        function createOrderItem(category) {
            return map(category, c => ({
                    size:c.defaultSize||'', 
                    temperature:c.defaultTemperature||'', 
                    options:{}, optionSizes:{} 
                })) 
                || { options:{}, optionSizes:{} }
        }
        
        function sanitizeItem(item) {
            const options = {}
            const optionSizes = {}
            itemOptions(item).forEach(option => {
                options[option.category] = option.name
                optionSizes[option.category] = option.size
            })            
            return Object.assign({}, item, { options, optionSizes })
        }
        
        function addToOrder(item) {
            if (!cart.value || !cart.value.items) {
                cart.value = { items:[] }
            }
            
            cart.value.items.push(sanitizeItem(item))
            saveCart()
            reset()
        }
        
        function itemOptions(item) {
            const results = []
            Object.keys(item.options).forEach(category => {
                const name = item.options[category]
                if (!name) return
                const size = item.optionSizes[category] ?? 1
                const to = { category, name, size }
                results.push(to)
            })
            return results
        }
        
        function reset() {
            orderItem.value = createOrderItem(activeCategory.value)
            saveCart()
        }
        function saveCart() {
            if (cartItems.value.length) {
                localStorage.setItem('cart', JSON.stringify(cart.value))
            } else {
                localStorage.removeItem('cart')
            }
        }
        function editCartItem(item) {
            const product = productsMap[item.product]
            const category = categories.find(x => x.id === product.categoryId)
            navTo(category.name, { product:product.name })
            orderItem.value = item
        }
        function removeCartItem(item) {
            cart.value.items = cart.value.items.filter(x => x !== item)
            saveCart() 
        }
        function duplicateCartItem(item) {
            const pos = cart.value.items.findIndex(x => x === item)
            cart.value.items.splice(pos, 0, Object.assign({}, item))
            saveCart() 
        }
        function doneEditCartItem(save) {
            if (save) {
                saveCart()
            } else {
                // reload cart from last save
                cart.value = map(localStorage.getItem('cart'), x => JSON.parse(x)) || null
            }
            reset()
            navTo(null)
        }
        function emptyCart() {
            cart.value = { items:[] }
            localStorage.removeItem('cart')
        }
        
        const timeout = ms => new Promise(resolve => setTimeout(resolve, ms))
        
        function clear() {
            isListening.value = false
            isTranscribing.value = false
            transcript.value = ''
            apiProcessed.value = new ApiResult()
            txtOrder.value = ''
            audio.value = null
        }
        
        async function toggleRecording() {
            if (!navigator.mediaDevices?.getUserMedia) {
                alert('getUserMedia() is not supported in your browser')
                return
            }
            
            clear()
            isRecording.value = !isRecording.value
            if (isRecording.value) {
                audio.value = null
                await audioRecorder.start()
                setTimeout(() => isListening.value = true, 2000)
            } else {
                isTranscribing.value = true
                audio.value = await audioRecorder.stop()
                audio.value.addEventListener('playing', e => isPlaying.value = true)
                audio.value.addEventListener('pause', e => isPlaying.value = false)
                audio.value.addEventListener('ended', e => isPlaying.value = false)
                
                if (Mock.transcribing) {
                    await timeout(Mock.wait)
                    transcript.value = Mock.recording.transcript
                } else {
                    const formData = new FormData()
                    formData.append('path', audioRecorder.audioBlob, `file.${audioRecorder.audioExt}`)
                    const api = await client.apiForm(new CreateCoffeeShopRecording(), formData)
                    if (api.succeeded) {
                        transcript.value = api.response.transcript
                    }
                }
                isTranscribing.value = false
                await processOrder(transcript.value)
            }
        }
        
        async function onSubmit() {
            const request = txtOrder.value
            clear()
            txtOrder.value = request
            await processOrder(request)
            txtOrder.value = ''
        }
        
        async function processOrder(request) {
            if (!request || !request.trim()) return
            
            isSendingChat.value = true
            if (Mock.sendingChat) {
                await timeout(Mock.wait)
                apiChat.value = new ApiResult({ response: Mock.chat })
            } else {
                apiChat.value = await client.api(new CreateCoffeeShopChat({
                    request: request.toLowerCase()
                }))
            }
            isSendingChat.value = false
            if (apiChat.value.response) {
                processChatItems(JSON.parse(apiChat.value.response.chatResponse).items)
            }
        }
        
        function processChatItems(items) {
            console.log('processChatResponse', items)
            const addedProducts = []
            items.forEach(item => {
                if (item.type.toLowerCase() !== "lineitem") {
                    console.warn(`ignoring unknown lineItem type ${item.type}`)
                    return
                }
                const productLower = item.product?.name?.toLowerCase() ?? ''
                const product = products.find(x => x.name.toLowerCase() === productLower)
                if (!product) {
                    console.warn(`ignoring unknown product ${productLower}`)
                    return
                }
                const category = categories.find(x => x.id === product.categoryId)
                const categoryOptions = category.options?.map(x => options.find(o => o.id === x.optionId)) ?? []
                const orderItem = createOrderItem(category)
                orderItem.product = product.name
                const temperature = !category.temperatures || !item.temperature
                    ? null
                    : category.temperatures.find(x => x.toLowerCase() === item.temperature.toLowerCase())
                if (temperature) {
                    orderItem.temperature = temperature
                }
                const size = !category.sizes || !item.size
                    ? null
                    : category.sizes.find(x => x.toLowerCase() === item.size.toLowerCase())
                if (size) {
                    orderItem.size = size
                }
                (item.options || []).forEach(itemOption => {
                    const option = categoryOptions.find(x => x.type.toLowerCase() === itemOption.type.toLowerCase())
                    if (!option) {
                        console.warn(`ignoring unknown option '${itemOption.type}' for category ${category.name}`)
                        return
                    }
                    const optionName = option.names.find(x => x.toLowerCase() === itemOption.name)
                    if (!optionName) {
                        console.warn(`ignoring unknown option name '${itemOption.name}' for option ${option.type}`)
                        return
                    }
                    orderItem.options[option.type] = optionName
                    const optionQuantity = Number.isFinite(itemOption.optionQuantity)
                        ? (Number.isInteger(itemOption.optionQuantity)
                            ? parseInt(itemOption.optionQuantity)
                            : parseFloat(itemOption.optionQuantity))
                        : optionQuantities.find(x => x.name.toLowerCase() === itemOption.optionQuantity)?.value || 1
                    orderItem.optionSizes[option.type] = optionQuantity
                })
                
                const quantity = !isNaN(item.quantity) 
                    ? item.quantity
                    : 1
                
                for (let i = 0; i<quantity; i++) {
                    addToOrder(orderItem)
                    if (!addedProducts.includes(orderItem.product)) {
                        addedProducts.push(orderItem.product)
                    }
                }
            })
            if (addedProducts.length > 0) {
                const productsList = addedProducts.length === 1
                    ? addedProducts[0]
                    : (addedProducts.slice(0, addedProducts.length - 1).join(', ') + " and " + addedProducts[addedProducts.length - 1])
                
                apiProcessed.value = new ApiResult({ response: `Your ${productsList} order was added to your cart` })
            } else {
                apiProcessed.value = new ApiResult({ error: { message: `I'm sorry we could not understand your order` } })
            }
        }

        onMounted(async () => {
            cart.value = map(localStorage.getItem('cart'), x => JSON.parse(x)) || null
            
            window.addEventListener('popstate', event => {
                navTo(event.state?.category || getCategory(), { product:event.state?.product || getProduct() }, false)
            })
            
            categoryOptions.value = (await client.api(new QueryOptions())).response.results
            
            const api = await client.api(new Authenticate())
            if (api.succeeded) {
                signIn(api.response)
            }
            init.value = true
        })

        return {
            categories,
            productsMap,
            refreshKey,
            categoryOptions,
            productOptions,
            activeCategory,
            activeProduct,
            currency,
            cart,
            cartItems,
            orderItem,
            modifyingExistingItem,
            txtOrder,
            onSubmit,
            doneEditCartItem,
            itemOptions,
            map,
            omit,
            humanize,
            addToOrder,
            reset,
            emptyCart,
            editCartItem,
            removeCartItem,
            duplicateCartItem,
            isRecording,
            isListening,
            isTranscribing,
            isSendingChat,
            toggleRecording,
            clear,
            audio,
            audioRecorder,
            isPlaying,
            transcript,
            apiChat,
            apiProcessed,
        }
    }
}
mount('#app',App)
</script>
